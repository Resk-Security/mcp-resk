name: Python Package CI/CD

on:
  push:
    branches: [master]
    tags:
      - 'v*'  # Run workflow on version tags, e.g. v1.0.0
  pull_request:
    branches: [master]

# Remove id-token permission, keep contents: write for GH Release
permissions:
  contents: write # Required for creating GitHub Releases

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.9', '3.10']
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        # Create a virtual environment first
        uv venv
        # Install all dependencies including dev dependencies
        uv pip install -e ".[dev]"
        # Install additional testing dependencies
        uv pip install jsonschema resk-llm
    
    - name: Lint with flake8
      run: |
        uv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --extend-ignore=F821,F824,F822
        uv run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        uv run mypy --ignore-missing-imports resk_mcp/
    
    - name: Test with pytest
      run: |
        # Note: Some auth-related tests are skipped due to environment differences
        export BYPASS_AUTH_FOR_TESTS=true
        uv run pytest -v

  build-and-publish:
    needs: test
    runs-on: ubuntu-latest
    # Only publish on tag push events
    if: startsWith(github.ref, 'refs/tags/v')
    permissions: # Keep contents: write for release creation
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install build and upload dependencies
      run: |
        # Create a virtual environment first
        uv venv
        uv pip install build twine
    
    - name: Build package
      run: |
        uv run python -m build
    
    - name: Verify package distribution
      run: |
        uv run twine check dist/*
    
    - name: Publish package to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }} # Use the secret token
      run: |
        uv run twine upload dist/* --skip-existing
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*
        generate_release_notes: true 